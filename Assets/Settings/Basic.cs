//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/Basic.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Basic : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Basic()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Basic"",
    ""maps"": [
        {
            ""name"": ""Basic action map"",
            ""id"": ""41c291ab-74b2-4003-83a3-ba208254e4b6"",
            ""actions"": [
                {
                    ""name"": ""FireMiddle"",
                    ""type"": ""Button"",
                    ""id"": ""2e169476-bd1d-4495-b09b-33676f3287dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e2a3065b-7392-42de-9293-38d7478f8fb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireRight"",
                    ""type"": ""Button"",
                    ""id"": ""becb4a64-a3cb-449b-8f25-dddade4518e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e92b1880-1ef0-4b23-ae71-a2a4f68d8710"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitToMenu"",
                    ""type"": ""Button"",
                    ""id"": ""77b109c6-cb70-44e0-af35-67cceb97a195"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6af0393-a2dd-4d58-81e4-1ac77aea997b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireMiddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83ce5e31-ba7e-4975-a306-905e532cae8b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d2bc763-2ddf-4ec3-916d-ea3713a11611"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59de982c-f9c0-4f30-b89e-7abb1c1ec36d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5555b49-9a4c-4dc3-8326-056791429582"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitToMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic action map
        m_Basicactionmap = asset.FindActionMap("Basic action map", throwIfNotFound: true);
        m_Basicactionmap_FireMiddle = m_Basicactionmap.FindAction("FireMiddle", throwIfNotFound: true);
        m_Basicactionmap_FireLeft = m_Basicactionmap.FindAction("FireLeft", throwIfNotFound: true);
        m_Basicactionmap_FireRight = m_Basicactionmap.FindAction("FireRight", throwIfNotFound: true);
        m_Basicactionmap_AimPosition = m_Basicactionmap.FindAction("AimPosition", throwIfNotFound: true);
        m_Basicactionmap_ExitToMenu = m_Basicactionmap.FindAction("ExitToMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic action map
    private readonly InputActionMap m_Basicactionmap;
    private IBasicactionmapActions m_BasicactionmapActionsCallbackInterface;
    private readonly InputAction m_Basicactionmap_FireMiddle;
    private readonly InputAction m_Basicactionmap_FireLeft;
    private readonly InputAction m_Basicactionmap_FireRight;
    private readonly InputAction m_Basicactionmap_AimPosition;
    private readonly InputAction m_Basicactionmap_ExitToMenu;
    public struct BasicactionmapActions
    {
        private @Basic m_Wrapper;
        public BasicactionmapActions(@Basic wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireMiddle => m_Wrapper.m_Basicactionmap_FireMiddle;
        public InputAction @FireLeft => m_Wrapper.m_Basicactionmap_FireLeft;
        public InputAction @FireRight => m_Wrapper.m_Basicactionmap_FireRight;
        public InputAction @AimPosition => m_Wrapper.m_Basicactionmap_AimPosition;
        public InputAction @ExitToMenu => m_Wrapper.m_Basicactionmap_ExitToMenu;
        public InputActionMap Get() { return m_Wrapper.m_Basicactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicactionmapActions set) { return set.Get(); }
        public void SetCallbacks(IBasicactionmapActions instance)
        {
            if (m_Wrapper.m_BasicactionmapActionsCallbackInterface != null)
            {
                @FireMiddle.started -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireMiddle;
                @FireMiddle.performed -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireMiddle;
                @FireMiddle.canceled -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireMiddle;
                @FireLeft.started -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireLeft;
                @FireLeft.performed -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireLeft;
                @FireLeft.canceled -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireLeft;
                @FireRight.started -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireRight;
                @FireRight.performed -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireRight;
                @FireRight.canceled -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnFireRight;
                @AimPosition.started -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnAimPosition;
                @AimPosition.performed -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnAimPosition;
                @AimPosition.canceled -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnAimPosition;
                @ExitToMenu.started -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnExitToMenu;
                @ExitToMenu.performed -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnExitToMenu;
                @ExitToMenu.canceled -= m_Wrapper.m_BasicactionmapActionsCallbackInterface.OnExitToMenu;
            }
            m_Wrapper.m_BasicactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FireMiddle.started += instance.OnFireMiddle;
                @FireMiddle.performed += instance.OnFireMiddle;
                @FireMiddle.canceled += instance.OnFireMiddle;
                @FireLeft.started += instance.OnFireLeft;
                @FireLeft.performed += instance.OnFireLeft;
                @FireLeft.canceled += instance.OnFireLeft;
                @FireRight.started += instance.OnFireRight;
                @FireRight.performed += instance.OnFireRight;
                @FireRight.canceled += instance.OnFireRight;
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @ExitToMenu.started += instance.OnExitToMenu;
                @ExitToMenu.performed += instance.OnExitToMenu;
                @ExitToMenu.canceled += instance.OnExitToMenu;
            }
        }
    }
    public BasicactionmapActions @Basicactionmap => new BasicactionmapActions(this);
    public interface IBasicactionmapActions
    {
        void OnFireMiddle(InputAction.CallbackContext context);
        void OnFireLeft(InputAction.CallbackContext context);
        void OnFireRight(InputAction.CallbackContext context);
        void OnAimPosition(InputAction.CallbackContext context);
        void OnExitToMenu(InputAction.CallbackContext context);
    }
}
